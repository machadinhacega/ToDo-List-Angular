{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../directives/date-warning.directive\";\nconst _c0 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\nfunction TaskListComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_3_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.selectedTask(task_r1));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"slice\");\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c0, task_r1.title === \"teste\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", task_r1.title, \" - \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", i0.ɵɵpipeBind3(4, 5, task_r1.description, 0, 4), \" - \", i0.ɵɵpipeBind2(5, 9, task_r1.date, \"dd/MM/yy\"), \" - \", task_r1.status, \" \");\n  }\n}\nexport class TaskListComponent {\n  constructor() {\n    // esses são os parâmetros quee será enviados para os componentes (mandar por import)\n    // a variável 'tasks' é do tipo 'IListTasks\n    // Esse tipo (IListTasks) foi definido e exportado do app.ts\n    this.tasks = [];\n    // Mandando a informação\n    this.handleTask = new EventEmitter();\n  }\n  teste() {\n    console.log(this.tasks);\n  }\n  // Quando Inicia ESSA aplicação. O task-list\n  ngOnInit() {\n    console.log('Iniciou o task-list');\n    // this.interval = setInterval(() => {\n    //   console.log('segundos');\n    // },1000)\n  }\n\n  ngOnDestroy() {\n    console.log('Fechou o task-list');\n    clearInterval(this.interval);\n  }\n  selectedTask(task) {\n    // mandando a task (emitindo a task)\n    //  vai dizer \"ei, vc foi clicado\"\n    this.handleTask.emit(task);\n  }\n  static #_ = this.ɵfac = function TaskListComponent_Factory(t) {\n    return new (t || TaskListComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskListComponent,\n    selectors: [[\"app-task-list\"]],\n    inputs: {\n      tasks: \"tasks\"\n    },\n    outputs: {\n      handleTask: \"handleTask\"\n    },\n    decls: 8,\n    vars: 1,\n    consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [3, \"ngClass\"], [\"appDateWarning\", \"task\", 3, \"click\"]],\n    template: function TaskListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n        i0.ɵɵtext(2, \"Tarefas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, TaskListComponent_div_3_Template, 6, 14, \"div\", 0);\n        i0.ɵɵelementStart(4, \"div\");\n        i0.ɵɵelement(5, \"p\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_6_listener() {\n          return ctx.teste();\n        });\n        i0.ɵɵtext(7, \"Mostrar Console\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i2.DateWarningDirective, i1.SlicePipe, i1.DatePipe],\n    styles: [\".d-none[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWxpc3QvdGFzay1saXN0LmNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy4vLi4vLi4vLi4vLi4vLi4vLi4vTWV1JTIwRHJpdmUvYWRhL1NhbnRhbmRlcl9Db2RlcnNfMjAyM19Gcm9udC1FbmQvMDUtQW5ndWxhci1JL2F1bGEwMi90b0xpc3Qvc3JjL2FwcC9jb21wb25lbnRzL3Rhc2stbGlzdC90YXNrLWxpc3QuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0FDQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIuZC1ub25le1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxufSIsIi5kLW5vbmUge1xuICBkaXNwbGF5OiBub25lO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","i0","ɵɵelementStart","ɵɵlistener","TaskListComponent_div_3_Template_div_click_1_listener","restoredCtx","ɵɵrestoreView","_r3","task_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","selectedTask","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ɵɵpureFunction1","_c0","title","ɵɵadvance","ɵɵtextInterpolate1","ɵɵtextInterpolate3","ɵɵpipeBind3","description","ɵɵpipeBind2","date","status","TaskListComponent","constructor","tasks","handleTask","teste","console","log","ngOnInit","ngOnDestroy","clearInterval","interval","task","emit","_","_2","selectors","inputs","outputs","decls","vars","consts","template","TaskListComponent_Template","rf","ctx","ɵɵtemplate","TaskListComponent_div_3_Template","ɵɵelement","TaskListComponent_Template_button_click_6_listener"],"sources":["C:\\Users\\izavm\\Meu Drive\\ada\\Santander_Coders_2023_Front-End\\05-Angular-I\\aula02\\toList\\src\\app\\components\\task-list\\task-list.component.ts","C:\\Users\\izavm\\Meu Drive\\ada\\Santander_Coders_2023_Front-End\\05-Angular-I\\aula02\\toList\\src\\app\\components\\task-list\\task-list.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\n// import { IListTask } from 'src/app/app.component';\nimport { Task } from 'src/models/task.model';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.scss']\n})\nexport class TaskListComponent implements OnInit, OnDestroy {\n  // esses são os parâmetros quee será enviados para os componentes (mandar por import)\n  // a variável 'tasks' é do tipo 'IListTasks\n  // Esse tipo (IListTasks) foi definido e exportado do app.ts\n  @ Input() tasks: Task[] = [];\n  // Mandando a informação\n  @Output() handleTask = new EventEmitter();\n\n\n  interval: any;\n  \n  teste(){\n    console.log(this.tasks)\n  }\n\n  // Quando Inicia ESSA aplicação. O task-list\n  ngOnInit(){\n    console.log('Iniciou o task-list')\n    // this.interval = setInterval(() => {\n    //   console.log('segundos');\n    // },1000)\n  }\n\n  ngOnDestroy(): void {\n    console.log('Fechou o task-list')\n    clearInterval(this.interval)\n  }\n\n  selectedTask(task: Task){\n    // mandando a task (emitindo a task)\n    //  vai dizer \"ei, vc foi clicado\"\n    this.handleTask.emit(task)\n  }\n\n\n}\n","\n\n<div>\n    <h2>Tarefas</h2>\n\n    <div *ngFor=\"let task of tasks\"   [ngClass]=\"{'d-none': task.title === 'teste'}\">\n        <div appDateWarning = task (click)=\"selectedTask(task)\">\n            {{task.title}} - \n            <!-- {{task.title | currencyFormat: 'BRL' }} -  -->\n            <!-- BRL USD  -->\n            {{task.description | slice: 0:4 }} - \n            {{task.date | date:'dd/MM/yy'}} -\n            {{task.status}} \n            <!--  COMO FAZER UM IF  -->\n            <!-- <div *ngIf=\"task.title !== 'teste'\">\n                {{task.title}} - {{task.description}} - {{task.date}}\n            </div> -->\n        </div>\n    </div>\n\n    <div>\n        <p></p>\n    </div>\n\n</div>\n\n<!--   (evento) = \"função()\"\"        -->\n<button (click)=\"teste()\">Mostrar Console</button>"],"mappings":"AAAA,SAAoBA,YAAY,QAA0C,eAAe;;;;;;;;;;;;ICKrFC,EAAA,CAAAC,cAAA,aAAiF;IAClDD,EAAA,CAAAE,UAAA,mBAAAC,sDAAA;MAAA,MAAAC,WAAA,GAAAJ,EAAA,CAAAK,aAAA,CAAAC,GAAA;MAAA,MAAAC,OAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAC,MAAA,GAAAT,EAAA,CAAAU,aAAA;MAAA,OAASV,EAAA,CAAAW,WAAA,CAAAF,MAAA,CAAAG,YAAA,CAAAL,OAAA,CAAkB;IAAA,EAAC;IACnDP,EAAA,CAAAa,MAAA,GACA;IAEAb,EAAA,CAAAa,MAAA,GAGA;;;IAIJb,EAAA,CAAAc,YAAA,EAAM;;;;IAZwBd,EAAA,CAAAe,UAAA,YAAAf,EAAA,CAAAgB,eAAA,KAAAC,GAAA,EAAAV,OAAA,CAAAW,KAAA,cAA8C;IAExElB,EAAA,CAAAmB,SAAA,GACA;IADAnB,EAAA,CAAAoB,kBAAA,MAAAb,OAAA,CAAAW,KAAA,QACA;IAEAlB,EAAA,CAAAmB,SAAA,GAGA;IAHAnB,EAAA,CAAAqB,kBAAA,MAAArB,EAAA,CAAAsB,WAAA,OAAAf,OAAA,CAAAgB,WAAA,gBAAAvB,EAAA,CAAAwB,WAAA,OAAAjB,OAAA,CAAAkB,IAAA,sBAAAlB,OAAA,CAAAmB,MAAA,MAGA;;;ADJZ,OAAM,MAAOC,iBAAiB;EAL9BC,YAAA;IAME;IACA;IACA;IACU,KAAAC,KAAK,GAAW,EAAE;IAC5B;IACU,KAAAC,UAAU,GAAG,IAAI/B,YAAY,EAAE;;EAKzCgC,KAAKA,CAAA;IACHC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,KAAK,CAAC;EACzB;EAEA;EACAK,QAAQA,CAAA;IACNF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC;IACA;IACA;EACF;;EAEAE,WAAWA,CAAA;IACTH,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjCG,aAAa,CAAC,IAAI,CAACC,QAAQ,CAAC;EAC9B;EAEAzB,YAAYA,CAAC0B,IAAU;IACrB;IACA;IACA,IAAI,CAACR,UAAU,CAACS,IAAI,CAACD,IAAI,CAAC;EAC5B;EAAC,QAAAE,CAAA,G;qBAhCUb,iBAAiB;EAAA;EAAA,QAAAc,EAAA,G;UAAjBd,iBAAiB;IAAAe,SAAA;IAAAC,MAAA;MAAAd,KAAA;IAAA;IAAAe,OAAA;MAAAd,UAAA;IAAA;IAAAe,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCP9BlD,EAAA,CAAAC,cAAA,UAAK;QACGD,EAAA,CAAAa,MAAA,cAAO;QAAAb,EAAA,CAAAc,YAAA,EAAK;QAEhBd,EAAA,CAAAoD,UAAA,IAAAC,gCAAA,kBAaM;QAENrD,EAAA,CAAAC,cAAA,UAAK;QACDD,EAAA,CAAAsD,SAAA,QAAO;QACXtD,EAAA,CAAAc,YAAA,EAAM;QAKVd,EAAA,CAAAC,cAAA,gBAA0B;QAAlBD,EAAA,CAAAE,UAAA,mBAAAqD,mDAAA;UAAA,OAASJ,GAAA,CAAApB,KAAA,EAAO;QAAA,EAAC;QAAC/B,EAAA,CAAAa,MAAA,sBAAe;QAAAb,EAAA,CAAAc,YAAA,EAAS;;;QAtBxBd,EAAA,CAAAmB,SAAA,GAAQ;QAARnB,EAAA,CAAAe,UAAA,YAAAoC,GAAA,CAAAtB,KAAA,CAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}