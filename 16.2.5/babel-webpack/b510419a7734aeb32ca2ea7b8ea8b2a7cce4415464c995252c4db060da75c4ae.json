{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class DateMaskDirective {\n  // fica observando, tal qual o eventlistener\n  // observar o input\n  onInput(event) {\n    // \"as\" é pra forçar a tipagem do elemento. FOi usada aqui para o input conseguir pegar o valor\n    const input = event.target;\n    const value = input.value;\n    const valueTratado = value.replace('/', '');\n    // debugger\n    // alterar o valor q a pessoa esta digitando para fazer nossa máscara\n    if (value.length === 3) {\n      input.value = `${valueTratado.slice(0, 2)}/${valueTratado.slice(2)}`;\n      return;\n    }\n    if (value.length === 5) {\n      input.value = `${valueTratado.slice(0, 2)}/${valueTratado.slice(4)}`;\n      return;\n    }\n    input.value = valueTratado;\n  }\n  constructor() {}\n  static #_ = this.ɵfac = function DateMaskDirective_Factory(t) {\n    return new (t || DateMaskDirective)();\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DateMaskDirective,\n    selectors: [[\"\", \"appDateMask\", \"\"]],\n    hostBindings: function DateMaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function DateMaskDirective_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        });\n      }\n    }\n  });\n}","map":{"version":3,"names":["DateMaskDirective","onInput","event","input","target","value","valueTratado","replace","length","slice","constructor","_","_2","selectors","hostBindings","DateMaskDirective_HostBindings","rf","ctx","$event"],"sources":["C:\\Users\\izavm\\Meu Drive\\ada\\Santander_Coders_2023_Front-End\\05-Angular-I\\aula02\\toList\\src\\app\\directives\\date-mask.directive.ts"],"sourcesContent":["import { Directive, Host, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appDateMask]'\n})\nexport class DateMaskDirective {\n\n  // fica observando, tal qual o eventlistener\n  // observar o input\n  @HostListener('input', ['$event'])\n  onInput(event: Event){\n    // \"as\" é pra forçar a tipagem do elemento. FOi usada aqui para o input conseguir pegar o valor\n    const input = event.target as HTMLInputElement;\n    const value = input.value;\n\n    const valueTratado = value.replace('/','')\n\n    // debugger\n    // alterar o valor q a pessoa esta digitando para fazer nossa máscara\n    if(value.length === 3){\n      input.value = `${valueTratado.slice(0,2)}/${valueTratado.slice(2)}`\n      return\n    }\n\n    if(value.length === 5){\n      input.value = `${valueTratado.slice(0,2)}/${valueTratado.slice(4)}`\n      return\n    }\n\n    input.value = valueTratado\n\n  }\n\n  constructor() { }\n\n}\n"],"mappings":";AAKA,OAAM,MAAOA,iBAAiB;EAE5B;EACA;EAEAC,OAAOA,CAACC,KAAY;IAClB;IACA,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAA0B;IAC9C,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK;IAEzB,MAAMC,YAAY,GAAGD,KAAK,CAACE,OAAO,CAAC,GAAG,EAAC,EAAE,CAAC;IAE1C;IACA;IACA,IAAGF,KAAK,CAACG,MAAM,KAAK,CAAC,EAAC;MACpBL,KAAK,CAACE,KAAK,GAAG,GAAGC,YAAY,CAACG,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,IAAIH,YAAY,CAACG,KAAK,CAAC,CAAC,CAAC,EAAE;MACnE;;IAGF,IAAGJ,KAAK,CAACG,MAAM,KAAK,CAAC,EAAC;MACpBL,KAAK,CAACE,KAAK,GAAG,GAAGC,YAAY,CAACG,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,IAAIH,YAAY,CAACG,KAAK,CAAC,CAAC,CAAC,EAAE;MACnE;;IAGFN,KAAK,CAACE,KAAK,GAAGC,YAAY;EAE5B;EAEAI,YAAA,GAAgB;EAAC,QAAAC,CAAA,G;qBA5BNX,iBAAiB;EAAA;EAAA,QAAAY,EAAA,G;UAAjBZ,iBAAiB;IAAAa,SAAA;IAAAC,YAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;iBAAjBC,GAAA,CAAAhB,OAAA,CAAAiB,MAAA,CAAe;QAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}