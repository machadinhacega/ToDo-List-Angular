{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let TaskFormReactiveComponent = class TaskFormReactiveComponent {\n  // Precisamos de um constructor para injetar uma dependencia, colocar um serviço aqui dentro\n  // \"formBuilder\" poderia ser qualquer nome.\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.tags = [];\n    this.form = this.formBuilder.group({\n      // o primeiro parametro é o valor inicial do meu input, deposi vêm meus validadores\n      title: ['', Validators.required, Validators.min(3)],\n      // Mais de uma validação:\n      // title: ['', [Validators.required, Validators.email]],\n      description: ['', Validators.required],\n      date: ['', Validators.required],\n      status: ['', Validators.required]\n      // Se tivesse mais um item que carrega um objeto, era so repetir a mesma estrutura. Ex:\n      // endereco: this.formBuilder.group({\n      //    rua: ['', Validators.required],\n      //    cidade: ['', Validators.required],\n      //    estado: ['', Validators.required],\n      // })\n    });\n\n    this.addTask = new EventEmitter();\n  }\n  submitTask() {\n    // esse if é para se caso o formulario estaja inválido, nao ir para as linhas de baixo, q sao as linhas q add a task à lista\n    if (this.form.invalid) return;\n    this.addTask.emit(this.form.value);\n    this.form.reset();\n  }\n  addTag() {\n    this.tags.push('');\n  }\n};\n__decorate([Output()], TaskFormReactiveComponent.prototype, \"addTask\", void 0);\nTaskFormReactiveComponent = __decorate([Component({\n  selector: 'app-task-form-reactive',\n  templateUrl: './task-form-reactive.component.html',\n  styleUrls: ['./task-form-reactive.component.scss']\n})], TaskFormReactiveComponent);","map":{"version":3,"names":["Component","EventEmitter","Output","Validators","TaskFormReactiveComponent","constructor","formBuilder","tags","form","group","title","required","min","description","date","status","addTask","submitTask","invalid","emit","value","reset","addTag","push","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\izavm\\Meu Drive\\ada\\Santander_Coders_2023_Front-End\\05-Angular-I\\aula02\\toList\\src\\app\\components\\task-form-reactive\\task-form-reactive.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Task } from 'src/models/task.model';\n\n@Component({\n  selector: 'app-task-form-reactive',\n  templateUrl: './task-form-reactive.component.html',\n  styleUrls: ['./task-form-reactive.component.scss']\n})\nexport class TaskFormReactiveComponent {\n\n  tags: string[] = []\n\n  public form: FormGroup = this.formBuilder.group({\n    // o primeiro parametro é o valor inicial do meu input, deposi vêm meus validadores\n    title: ['', Validators.required, Validators.min(3)],\n    // Mais de uma validação:\n    // title: ['', [Validators.required, Validators.email]],\n    description: ['', Validators.required],\n    date: ['', Validators.required],\n    status: ['', Validators.required],\n    // Se tivesse mais um item que carrega um objeto, era so repetir a mesma estrutura. Ex:\n    // endereco: this.formBuilder.group({\n    //    rua: ['', Validators.required],\n    //    cidade: ['', Validators.required],\n    //    estado: ['', Validators.required],\n    // })\n  })\n\n\n  @Output() addTask = new EventEmitter()\n\n\n  // Precisamos de um constructor para injetar uma dependencia, colocar um serviço aqui dentro\n  // \"formBuilder\" poderia ser qualquer nome.\n  constructor(private formBuilder: FormBuilder){}\n\n\n  submitTask(){\n    \n    // esse if é para se caso o formulario estaja inválido, nao ir para as linhas de baixo, q sao as linhas q add a task à lista\n    if (this.form.invalid) return\n\n    this.addTask.emit(this.form.value);\n    \n    this.form.reset()\n    \n  }\n\n  addTag(){\n    this.tags.push('')\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC/D,SAAiCC,UAAU,QAAQ,gBAAgB;AAQ5D,WAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAwBpC;EACA;EACAC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAxB/B,KAAAC,IAAI,GAAa,EAAE;IAEZ,KAAAC,IAAI,GAAc,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MAC9C;MACAC,KAAK,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACS,GAAG,CAAC,CAAC,CAAC,CAAC;MACnD;MACA;MACAC,WAAW,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACQ,QAAQ,CAAC;MACtCG,IAAI,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACQ,QAAQ,CAAC;MAC/BI,MAAM,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACQ,QAAQ;MAChC;MACA;MACA;MACA;MACA;MACA;KACD,CAAC;;IAGQ,KAAAK,OAAO,GAAG,IAAIf,YAAY,EAAE;EAKQ;EAG9CgB,UAAUA,CAAA;IAER;IACA,IAAI,IAAI,CAACT,IAAI,CAACU,OAAO,EAAE;IAEvB,IAAI,CAACF,OAAO,CAACG,IAAI,CAAC,IAAI,CAACX,IAAI,CAACY,KAAK,CAAC;IAElC,IAAI,CAACZ,IAAI,CAACa,KAAK,EAAE;EAEnB;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,EAAE,CAAC;EACpB;CACD;AAtBWC,UAAA,EAATtB,MAAM,EAAE,C,yDAA6B;AArB3BE,yBAAyB,GAAAoB,UAAA,EALrCxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,qCAAqC;CAClD,CAAC,C,EACWvB,yBAAyB,CA2CrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}