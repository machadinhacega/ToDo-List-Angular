{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let TaskFormReactiveComponent = class TaskFormReactiveComponent {\n  // Precisamos de um constructor para injetar uma dependencia, colocar um serviço aqui dentro\n  // \"formBuilder\" poderia ser qualquer nome.\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.tags = [];\n    this.form = this.formBuilder.group({\n      // o primeiro parametro é o valor inicial do meu input, deposi vêm meus validadores\n      title: ['', Validators.required],\n      // Mais de uma validação:\n      // title: ['', [Validators.required, Validators.email]],\n      description: ['', Validators.required],\n      valor: ['5.20', Validators.required],\n      date: ['', Validators.required],\n      // DATE TEXT\n      // date: ['', [Validators.required, dateLessThanValidator()]],\n      status: ['', Validators.required],\n      // Se tivesse mais um item que carrega um objeto, era so repetir a mesma estrutura. Ex:\n      // endereco: this.formBuilder.group({\n      //    rua: ['', Validators.required],\n      //    cidade: ['', Validators.required],\n      //    estado: ['', Validators.required],\n      // })\n      tags: this.formBuilder.array([])\n      // Validando TAGS nesse nivel, eu estou requerindo que tenha pelo menos 1 item no meu \"tags\" | (ver addTag())\n      // tags: this.formBuilder.array([],Validators.required)\n    });\n\n    this.addTask = new EventEmitter();\n  }\n  get title() {\n    return this.form.get('title');\n  }\n  get myTags() {\n    return this.form.get('tags');\n  }\n  submitTask() {\n    // console.log(this.form.value)\n    // console.log('invalid', this.form.invalid)\n    // esse if é para se caso o formulario estaja inválido, nao ir para as linhas de baixo, q sao as linhas q add a task à lista\n    if (this.form.invalid) return;\n    this.addTask.emit(this.form.value);\n    this.form.reset();\n  }\n  addTag() {\n    // MESMA COISA:\n    // this.form.get('tags')\n    // this.myTags\n    // Validando o formulário nesse nível, estou requerindo que as tags que forem abertas sejam preenchidas com algum texto \n    this.myTags.push(this.formBuilder.control('', Validators.required));\n  }\n};\n__decorate([Output()], TaskFormReactiveComponent.prototype, \"addTask\", void 0);\nTaskFormReactiveComponent = __decorate([Component({\n  selector: 'app-task-form-reactive',\n  templateUrl: './task-form-reactive.component.html',\n  styleUrls: ['./task-form-reactive.component.scss']\n})], TaskFormReactiveComponent);","map":{"version":3,"names":["Component","EventEmitter","Output","Validators","TaskFormReactiveComponent","constructor","formBuilder","tags","form","group","title","required","description","valor","date","status","array","addTask","get","myTags","submitTask","invalid","emit","value","reset","addTag","push","control","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\izavm\\Meu Drive\\ada\\Santander_Coders_2023_Front-End\\05-Angular-I\\aula02\\toList\\src\\app\\components\\task-form-reactive\\task-form-reactive.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { dateLessThanValidator } from 'src/app/validators/dateLessThan.validator';\nimport { Task } from 'src/models/task.model';\n\n@Component({\n  selector: 'app-task-form-reactive',\n  templateUrl: './task-form-reactive.component.html',\n  styleUrls: ['./task-form-reactive.component.scss']\n})\nexport class TaskFormReactiveComponent {\n\n  tags: string[] = []\n\n  public form: FormGroup = this.formBuilder.group({\n    // o primeiro parametro é o valor inicial do meu input, deposi vêm meus validadores\n    title: ['', Validators.required],\n    // Mais de uma validação:\n    // title: ['', [Validators.required, Validators.email]],\n    description: ['', Validators.required],\n    valor: ['5.20', Validators.required],\n    date: ['', Validators.required],\n    // DATE TEXT\n    // date: ['', [Validators.required, dateLessThanValidator()]],\n    status: ['', Validators.required],\n    // Se tivesse mais um item que carrega um objeto, era so repetir a mesma estrutura. Ex:\n    // endereco: this.formBuilder.group({\n    //    rua: ['', Validators.required],\n    //    cidade: ['', Validators.required],\n    //    estado: ['', Validators.required],\n    // })\n    tags: this.formBuilder.array([])\n    // Validando TAGS nesse nivel, eu estou requerindo que tenha pelo menos 1 item no meu \"tags\" | (ver addTag())\n    // tags: this.formBuilder.array([],Validators.required)\n  })\n\n\n  @Output() addTask = new EventEmitter()\n\n\n  // Precisamos de um constructor para injetar uma dependencia, colocar um serviço aqui dentro\n  // \"formBuilder\" poderia ser qualquer nome.\n  constructor(private formBuilder: FormBuilder){}\n\n  get title(){\n    return this.form.get('title')\n  }\n\n  get myTags(){   // Esta buscando todos meus arrays\n    return this.form.get('tags') as FormArray;\n  }\n\n  submitTask(){\n    // console.log(this.form.value)\n    // console.log('invalid', this.form.invalid)\n\n    // esse if é para se caso o formulario estaja inválido, nao ir para as linhas de baixo, q sao as linhas q add a task à lista\n    if (this.form.invalid) return\n\n    this.addTask.emit(this.form.value);\n    this.form.reset()\n    \n  }\n\n  addTag(){\n    // MESMA COISA:\n    // this.form.get('tags')\n    // this.myTags\n    \n    // Validando o formulário nesse nível, estou requerindo que as tags que forem abertas sejam preenchidas com algum texto \n    this.myTags.push(this.formBuilder.control('', Validators.required))\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC/D,SAA4CC,UAAU,QAAQ,gBAAgB;AASvE,WAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EA8BpC;EACA;EACAC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IA9B/B,KAAAC,IAAI,GAAa,EAAE;IAEZ,KAAAC,IAAI,GAAc,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MAC9C;MACAC,KAAK,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MAChC;MACA;MACAC,WAAW,EAAE,CAAC,EAAE,EAAET,UAAU,CAACQ,QAAQ,CAAC;MACtCE,KAAK,EAAE,CAAC,MAAM,EAAEV,UAAU,CAACQ,QAAQ,CAAC;MACpCG,IAAI,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACQ,QAAQ,CAAC;MAC/B;MACA;MACAI,MAAM,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACQ,QAAQ,CAAC;MACjC;MACA;MACA;MACA;MACA;MACA;MACAJ,IAAI,EAAE,IAAI,CAACD,WAAW,CAACU,KAAK,CAAC,EAAE;MAC/B;MACA;KACD,CAAC;;IAGQ,KAAAC,OAAO,GAAG,IAAIhB,YAAY,EAAE;EAKQ;EAE9C,IAAIS,KAAKA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACU,GAAG,CAAC,OAAO,CAAC;EAC/B;EAEA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACX,IAAI,CAACU,GAAG,CAAC,MAAM,CAAc;EAC3C;EAEAE,UAAUA,CAAA;IACR;IACA;IAEA;IACA,IAAI,IAAI,CAACZ,IAAI,CAACa,OAAO,EAAE;IAEvB,IAAI,CAACJ,OAAO,CAACK,IAAI,CAAC,IAAI,CAACd,IAAI,CAACe,KAAK,CAAC;IAClC,IAAI,CAACf,IAAI,CAACgB,KAAK,EAAE;EAEnB;EAEAC,MAAMA,CAAA;IACJ;IACA;IACA;IAEA;IACA,IAAI,CAACN,MAAM,CAACO,IAAI,CAAC,IAAI,CAACpB,WAAW,CAACqB,OAAO,CAAC,EAAE,EAAExB,UAAU,CAACQ,QAAQ,CAAC,CAAC;EACrE;CACD;AAnCWiB,UAAA,EAAT1B,MAAM,EAAE,C,yDAA6B;AA3B3BE,yBAAyB,GAAAwB,UAAA,EALrC5B,SAAS,CAAC;EACT6B,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,qCAAqC;CAClD,CAAC,C,EACW3B,yBAAyB,CA8DrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}