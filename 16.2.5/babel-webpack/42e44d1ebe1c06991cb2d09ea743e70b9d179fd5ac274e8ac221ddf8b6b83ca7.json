{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nexport let TaskListComponent = class TaskListComponent {\n  constructor() {\n    // esses são os parâmetros quee será enviados para os componentes (mandar por import)\n    // a variável 'tasks' é do tipo 'IListTasks\n    // Esse tipo (IListTasks) foi definido e exportado do app.ts\n    this.tasks = [];\n    // Mandando a informação\n    this.handleTask = new EventEmitter();\n    this.tasksFiltradas = [];\n  }\n  teste() {\n    console.log(this.tasks);\n  }\n  // Quando Inicia ESSA aplicação. O task-list\n  ngOnInit() {\n    console.log('Iniciou o task-list');\n    // AQUI FOI PRA MOSTRAR QUE INICI ASSIM Q RODA O COMPONENTE\n    // E PARA PARAR A CONTAGEM, POR EXEMPLO, PRECISARIA RODAR O DESTROY\n    // this.interval = setInterval(() => {\n    //   console.log('segundos');\n    // },1000)\n    // Como minhas tasks filtradas tão inicializando vazias, vou iniciar ja mostrando. Já passando o filtro\n    // this.handleFilter('all')\n    this.tasksFiltradas = this.tasks;\n  }\n  ngOnDestroy() {\n    console.log('Fechou o task-list');\n    // clearInterval(this.interval)\n  }\n\n  selectedTask(task) {\n    // mandando a task (emitindo a task)\n    //  vai dizer \"ei, vc foi clicado\"\n    this.handleTask.emit(task);\n  }\n  handleFilter(filter) {\n    if (filter === 'all') {\n      this.tasksFiltradas = this.tasks;\n      console.log(this.tasksFiltradas);\n      return;\n    }\n    this.tasksFiltradas = this.tasks.filter(item => {\n      if (item.status === filter) {\n        return item;\n      }\n      return;\n    });\n    console.log(this.tasksFiltradas);\n  }\n};\n__decorate([Input()], TaskListComponent.prototype, \"tasks\", void 0);\n__decorate([Output()], TaskListComponent.prototype, \"handleTask\", void 0);\nTaskListComponent = __decorate([Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.scss']\n})], TaskListComponent);","map":{"version":3,"names":["Component","EventEmitter","Input","Output","TaskListComponent","constructor","tasks","handleTask","tasksFiltradas","teste","console","log","ngOnInit","ngOnDestroy","selectedTask","task","emit","handleFilter","filter","item","status","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\izavm\\Meu Drive\\ada\\Santander_Coders_2023_Front-End\\05-Angular-I\\aula02\\toList\\src\\app\\components\\task-list\\task-list.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\n// import { IListTask } from 'src/app/app.component';\nimport { Task } from 'src/models/task.model';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.scss']\n})\nexport class TaskListComponent implements OnInit, OnDestroy {\n  // esses são os parâmetros quee será enviados para os componentes (mandar por import)\n  // a variável 'tasks' é do tipo 'IListTasks\n  // Esse tipo (IListTasks) foi definido e exportado do app.ts\n  @ Input() tasks: Task[] = [];\n  // Mandando a informação\n  @Output() handleTask = new EventEmitter();\n\n\n  tasksFiltradas: Task[] = [];\n\n  interval: any;\n  \n  teste(){\n    console.log(this.tasks)\n  }\n\n  // Quando Inicia ESSA aplicação. O task-list\n  ngOnInit(){\n    console.log('Iniciou o task-list')\n\n    // AQUI FOI PRA MOSTRAR QUE INICI ASSIM Q RODA O COMPONENTE\n    // E PARA PARAR A CONTAGEM, POR EXEMPLO, PRECISARIA RODAR O DESTROY\n    // this.interval = setInterval(() => {\n    //   console.log('segundos');\n    // },1000)\n\n    // Como minhas tasks filtradas tão inicializando vazias, vou iniciar ja mostrando. Já passando o filtro\n    // this.handleFilter('all')\n    this.tasksFiltradas = this.tasks\n  }\n\n  ngOnDestroy(): void {\n    console.log('Fechou o task-list')\n    // clearInterval(this.interval)\n  }\n\n  selectedTask(task: Task){\n    // mandando a task (emitindo a task)\n    //  vai dizer \"ei, vc foi clicado\"\n    this.handleTask.emit(task)\n  }\n\n  handleFilter(filter:string){\n    if(filter === 'all'){\n      this.tasksFiltradas = this.tasks;\n      console.log(this.tasksFiltradas)\n      return;\n    }\n    this.tasksFiltradas = this.tasks.filter(item => {\n      if(item.status === filter){\n        return item;\n      }\n      return\n    })\n\n    console.log(this.tasksFiltradas)\n  }\n\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAqBC,MAAM,QAAQ,eAAe;AASlF,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAAvBC,YAAA;IACL;IACA;IACA;IACU,KAAAC,KAAK,GAAW,EAAE;IAC5B;IACU,KAAAC,UAAU,GAAG,IAAIN,YAAY,EAAE;IAGzC,KAAAO,cAAc,GAAW,EAAE;EAoD7B;EAhDEC,KAAKA,CAAA;IACHC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,KAAK,CAAC;EACzB;EAEA;EACAM,QAAQA,CAAA;IACNF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAElC;IACA;IACA;IACA;IACA;IAEA;IACA;IACA,IAAI,CAACH,cAAc,GAAG,IAAI,CAACF,KAAK;EAClC;EAEAO,WAAWA,CAAA;IACTH,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC;EACF;;EAEAG,YAAYA,CAACC,IAAU;IACrB;IACA;IACA,IAAI,CAACR,UAAU,CAACS,IAAI,CAACD,IAAI,CAAC;EAC5B;EAEAE,YAAYA,CAACC,MAAa;IACxB,IAAGA,MAAM,KAAK,KAAK,EAAC;MAClB,IAAI,CAACV,cAAc,GAAG,IAAI,CAACF,KAAK;MAChCI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,cAAc,CAAC;MAChC;;IAEF,IAAI,CAACA,cAAc,GAAG,IAAI,CAACF,KAAK,CAACY,MAAM,CAACC,IAAI,IAAG;MAC7C,IAAGA,IAAI,CAACC,MAAM,KAAKF,MAAM,EAAC;QACxB,OAAOC,IAAI;;MAEb;IACF,CAAC,CAAC;IAEFT,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,cAAc,CAAC;EAClC;CAID;AAzDWa,UAAA,EAARnB,KAAK,EAAE,C,+CAAoB;AAEnBmB,UAAA,EAATlB,MAAM,EAAE,C,oDAAiC;AAN/BC,iBAAiB,GAAAiB,UAAA,EAL7BrB,SAAS,CAAC;EACTsB,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,C,EACWpB,iBAAiB,CA6D7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}